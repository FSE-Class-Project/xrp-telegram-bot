---
title: "Text. Tap. Transact."
subtitle: "From Instant Messaging to Instant Payments with the XRP Ledger & Telegram"
author: "Group 3 - Victor Dusabimana, Joseph Gray, Sam Horak, Cesaire Tobias"
date: "26 September 2025"
format:
  revealjs:
    theme: [default, custom.scss]
    self-contained: true
    embed-resources: true
    touch: true
    controls: true
    slide-number: c/t
    footer: "Financial Software Engineering (ECO5040S) - Class Project"
    center-title-slide: true
    highlight-style: a11y
    height: 1080
    width: 1920
    mermaid:
      theme: default
      themeVariables:
        fontSize: 16px
execute:
  echo: false
  eval: true
---

# Project Overview

::: {.columns}
::: {.column width="50%"}
**Problem**: Traditional payment systems have inherent limitations in speed, cost, and accessibility

**Solution**: XRP Ledger integration with Telegram for instant value transfer

**Technical Features**:

- **Settlement Time** - XRP Ledger confirms in 3-5 seconds
- **Transaction Cost** - Current XRP fee: 0.00001 XRP
- **Global Reach** - Works across borders without intermediaries
- **Accessibility** - Operates through Telegram messaging
- **Transparency** - All transactions recorded on public ledger
:::

::: {.column width="50%"}
```{mermaid}
%%{init: {'theme': 'dark', 'themeVariables': {'primaryColor':'#0288d1', 'primaryTextColor':'#fff', 'primaryBorderColor':'#0277bd', 'lineColor':'#5c5cff', 'secondaryColor':'#03a9f4', 'tertiaryColor':'#4fc3f7', 'background':'#1e1e1e', 'mainBkg':'#0288d1', 'secondBkg':'#03a9f4', 'tertiaryBkg':'#4fc3f7'}}}%%
graph TD
    A[User] --> B[Telegram App]
    B --> C[XRP TestNet Bot]
    C --> D[Python Backend]
    D --> E[XRP Ledger]
    D --> F[PostgreSQL]
    D --> G[Price APIs]

    style A fill:#4fc3f7,stroke:#0288d1,stroke-width:2px,color:#fff
    style C fill:#03a9f4,stroke:#0277bd,stroke-width:2px,color:#fff
    style E fill:#0288d1,stroke:#0277bd,stroke-width:2px,color:#fff
```
:::
:::

::: notes
This isn't about financial inclusion but financial evolution - it's about better financial infrastructure for everyone. A Fortune 500 company waiting 3 days for a wire transfer is just as inefficient as a farmer waiting for payment.
:::

---

## Background & Motivation

::: {.columns}
::: {.column width="60%"}
### Current Payment System Characteristics

**Traditional Systems:**

- Wire transfers: 1-5 business days
- Credit card fees: 1.5-3.5% per transaction
- International transfers: $15-50 flat fees typical
- Operating hours: Business days only for many services
- Setup requirements: Documentation, credit checks, minimum balances

**XRP Ledger Capabilities:**

- Consensus time: 3-5 seconds
- Network uptime: 24/7 operation
- Transaction cost: 0.00001 XRP (fraction of a cent)
- No geographic restrictions
- Open access protocol
:::

::: {.column width="40%"}
```{python}
import plotly.graph_objects as go

categories = ['POS Device', 'Bank Account', 'Transaction Fee', 'Settlement Time', 'Minimum Balance']
traditional = [500, 100, 5, 72, 500]  # $500 POS, $100 account fee, 5% fee, 72hrs, $500 minimum
our_solution = [0, 0, 0.01, 0.001, 0]  # Free, Free, $0.01, 4 seconds, No minimum

fig = go.Figure(data=[
    go.Bar(name='Traditional Banking',
           x=categories,
           y=traditional,
           marker_color='#ff4444',
           text=['$500', '$100/yr', '5%', '3 days', '$500'],
           textposition='outside'),
    go.Bar(name='Our Solution',
           x=categories,
           y=our_solution,
           marker_color='#4fc3f7',
           text=['$0', '$0', '$0.01', '4 sec', '$0'],
           textposition='outside')
])

fig.update_layout(
    title={'text': 'Banking vs Blockchain Comparison', 'font': {'size': 18}},
    yaxis_title={'text': 'Cost / Time', 'font': {'size': 12}},
    barmode='group',
    height=450,
    width=600,
    margin=dict(t=60, b=120, l=50, r=20),
    showlegend=True,
    yaxis_type='log',
    yaxis=dict(showticklabels=False)
)
fig.show()
```
:::
:::

::: notes
Traditional banking is a 600-year-old system retrofitted for the digital age. It doesn't matter if you're a Fortune 500 company or a street vendor - waiting 3 days for settlement and paying percentage-based fees is inefficient. Our solution provides superior infrastructure for everyone.
:::

---

## System Architecture

```{mermaid}
%%{init: {'theme': 'dark', 'themeVariables': {'primaryColor':'#0288d1', 'fontSize': '18px'}}}%%
flowchart TB
    subgraph "Frontend Layer"
        TG[Telegram Client]
        BOT[Bot Interface]
    end

    subgraph "Application Layer"
        API[FastAPI Server]
        WH[Webhook Handler]
        CMD[Command Processor]
    end

    subgraph "Service Layer"
        XRP[XRP Service]
        USR[User Service]
        PRC[Price Service]
        SEC[Security Service]
    end

    subgraph "Data Layer"
        DB[(PostgreSQL)]
        CACHE[(Redis Cache)]
    end

    subgraph "External Services"
        XRPL[XRP Ledger TestNet]
        PRICE[CoinGecko API]
    end

    TG <--> BOT
    BOT <--> WH
    WH --> CMD
    CMD --> XRP
    CMD --> USR
    CMD --> PRC
    XRP <--> XRPL
    PRC <--> PRICE
    USR <--> DB
    SEC --> DB
    PRC <--> CACHE

    style API fill:#03a9f4,stroke:#0277bd,stroke-width:2px,color:#fff
    style XRPL fill:#0288d1,stroke:#0277bd,stroke-width:2px,color:#fff
    style DB fill:#4fc3f7,stroke:#0288d1,stroke-width:2px,color:#fff
```

::: notes
Our modular architecture separates concerns across four layers. Telegram webhooks provide real-time messaging, FastAPI handles business logic, PostgreSQL ensures ACID compliance for financial data, and we integrate directly with XRP Ledger's TestNet.
:::

---

## Technical Implementation

::: {.columns}
::: {.column width="50%"}
### Technology Stack

- **Backend**: FastAPI + Python 3.10
- **Database**: PostgreSQL + SQLAlchemy
- **Caching**: Redis for price data
- **XRP Integration**: xrpl-py library
- **Security**: AES-256 encryption
- **Deployment**: Render Blueprint orchestration

### Key Design Decisions

1. **Webhooks over polling** for real-time response
2. **Custodial wallets** for user simplicity
3. **Encrypted storage** for private keys
4. **Async processing** for blockchain ops
5. **Cached pricing** to reduce API calls
:::

::: {.column width="50%"}
```python
# Core XRP Service Implementation
from xrpl.wallet import generate
from cryptography.fernet import Fernet

class XRPService:
    def create_wallet(self) -> tuple[str, str]:
        """Create and encrypt XRP wallet"""
        # Generate new wallet
        wallet = generate()

        # Encrypt secret key (never store plaintext!)
        encrypted_secret = self.encrypt(
            wallet.seed
        )

        # Fund from TestNet faucet
        self.fund_wallet(wallet.address)

        return wallet.address, encrypted_secret

    async def send_xrp(
        self,
        from_secret: str,
        to_address: str,
        amount: float
    ) -> dict:
        """Execute XRP transaction"""
        # Decrypt sender key
        wallet = self.get_wallet(from_secret)

        # Create & sign transaction
        payment = Payment(
            account=wallet.address,
            destination=to_address,
            amount=xrp_to_drops(amount)
        )

        # Submit to ledger
        return submit_and_wait(payment)
```
:::
:::

::: notes
We chose FastAPI for async performance, PostgreSQL for ACID compliance, and implemented AES-256 encryption. Keys are never stored in plaintext, and all blockchain operations are handled asynchronously.
:::

---

## User Journey & Features

::: {.columns}
::: {.column width="40%"}
### Core Features

✅ **Wallet Management**
- Auto-creation on /start
- TestNet funding included
- Encrypted key storage

✅ **Transactions**
- Natural language commands
- Multi-step confirmation
- Real-time blockchain updates

✅ **Market Data**
- Live XRP/USD prices
- 24h change tracking
- Historical charts

✅ **User Experience**
- Inline keyboards
- Status notifications
- Transaction receipts
:::

::: {.column width="60%"}
```{mermaid}
%%{init: {'theme': 'dark', 'themeVariables': {'fontSize': '14px'}}}%%
sequenceDiagram
    participant U as User
    participant T as Telegram
    participant B as Bot Backend
    participant X as XRP Ledger
    participant D as Database

    U->>T: /start
    T->>B: Webhook trigger
    B->>D: Check user exists
    alt New User
        B->>X: Generate wallet
        X-->>B: Address + keys
        B->>D: Store encrypted keys
        B->>X: Fund from faucet
    end
    B-->>T: Welcome + wallet info
    T-->>U: Display balance

    U->>T: /send 10 rN7n7...
    T->>B: Process command
    B->>D: Get sender wallet
    B->>X: Submit transaction
    X-->>B: Confirmation
    B->>D: Record transaction
    B-->>T: Success message
    T-->>U: Transaction receipt
```
:::
:::

::: notes
The user journey is designed for simplicity. A single /start command creates and funds a wallet. Sending XRP is as natural as typing a message, with built-in confirmations to prevent errors.
:::

---

## Performance & Testing

::: {.columns}
::: {.column width="50%"}
```{python}
import plotly.graph_objects as go

# Remove this chart as we don't have actual performance data
# Instead show XRP Ledger specifications
specs = ['Throughput', 'Finality', 'Node Count', 'Uptime']
values = [1500, 4, 150, 99.99]  # TPS, seconds, validators, percentage

fig = go.Figure(data=[
    go.Bar(x=specs,
           y=values,
           marker_color='#03a9f4',
           text=['1,500 TPS', '4 sec', '150+ nodes', '99.99%'],
           textposition='outside')
])

fig.update_layout(
    title={'text': 'XRP Ledger Specifications', 'font': {'size': 18}},
    yaxis_title='',
    height=450,
    width=700,
    margin=dict(t=60, b=100, l=50, r=20),
    showlegend=False,
    yaxis=dict(showticklabels=False)
)
fig.show()
```
:::

::: {.column width="50%"}
### Implementation Status

**Completed Features:**
- Telegram bot integration
- XRP wallet generation
- Transaction processing
- Balance checking
- Price data integration

### Testing Approach

- Unit tests for critical functions
- Integration testing with TestNet
- Security review of encryption methods
- API endpoint validation

**Note**: Performance metrics will be collected during production operation
:::
:::

::: notes
Our implementation leverages XRP Ledger's documented capabilities of 1,500 transactions per second and 4-second finality. Testing has been conducted on TestNet to validate functionality.
:::

---

## Security & Compliance

::: {.columns}
::: {.column width="60%"}
### Security Measures

🔐 **Encryption**
- AES-256 for private keys
- TLS 1.3 for all communications
- Encrypted database fields

🛡️ **Access Control**
- Telegram OAuth authentication
- Rate limiting (10 tx/minute/user)
- Webhook signature validation

⚠️ **Risk Management**
- TestNet-only for safety
- Transaction amount limits
- Comprehensive audit logging
- Automatic session timeouts

### Compliance Ready

- KYC integration points prepared
- Transaction monitoring capabilities
- Regulatory reporting framework
:::

::: {.column width="40%"}
```{mermaid}
%%{init: {'theme': 'dark', 'themeVariables': {'fontSize': '16px'}}}%%
graph TD
    A[Security Layers] --> B[Application]
    A --> C[Data]
    A --> D[Network]

    B --> B1[Input validation]
    B --> B2[Rate limiting]
    B --> B3[Authentication]

    C --> C1[AES-256 encryption]
    C --> C2[Key rotation]
    C --> C3[Backup strategy]

    D --> D1[TLS 1.3]
    D --> D2[Webhook validation]
    D --> D3[IP whitelisting]

    style A fill:#0288d1,stroke:#0277bd,stroke-width:2px,color:#fff
    style B fill:#03a9f4,stroke:#0288d1,stroke-width:2px,color:#fff
    style C fill:#03a9f4,stroke:#0288d1,stroke-width:2px,color:#fff
    style D fill:#03a9f4,stroke:#0288d1,stroke-width:2px,color:#fff
```
:::
:::

::: notes
Security is paramount in our custodial model. We implement defense in depth with multiple layers. Private keys are encrypted with AES-256 and never exposed. Rate limiting prevents abuse, and all operations are logged for audit trails.
:::

---

## Live Demo

::: {.columns}
::: {.column width="35%"}
### Use Cases

**Remittances**
- International money transfer
- Lower cost than traditional services
- Faster settlement times

**Small Business Payments**
- Accept payments without hardware investment
- Immediate access to funds
- Transaction history for accounting

**Peer-to-Peer Transfers**
- Direct transfers between individuals
- No intermediary required
- Works outside banking hours

**Value Storage**
- Stablecoin integration (planned)
- Protection against currency volatility
- Self-custody option available
:::

::: {.column width="30%"}
### Bot Commands

```bash
# Start bot and create wallet
/start

# Check balance
/balance

# Send XRP
/send [amount] [address]
Example: /send 10 rN7n7...

# View current price
/price

# Transaction history
/history

# Help menu
/help
```
:::

::: {.column width="35%"}
### Try It Now!

![Scan to open XRP Bot](https://api.qrserver.com/v1/create-qr-code/?size=350x350&data=https://t.me/group3_xrpl_bot)

**Scan QR or search:**

[@group3_xrpl_bot](https://t.me/group3_xrpl_bot)

*Live on Telegram - TestNet XRP only*
:::
:::

::: notes
Let's see the bot in action - We'll demonstrate new user onboarding, a peer-to-peer transaction, and real-time price checking. You can follow along by scanning the QR code.
:::

---

## Future Enhancements

::: {.columns}
::: {.column width="50%"}
### Phase 2 Features

💱 **Merchant Solutions**
- QR code payments
- Invoice generation
- Inventory financing via smart contracts
- Batch payments to suppliers

🌍 **Financial Inclusion**
- Micro-loans based on transaction history
- Group savings circles (stokvels/chamas)
- Bill payment integration
- Airtime/data top-ups

🏢 **Business Tools**
- Multi-user business accounts
- Automatic bookkeeping
- Tax reporting exports
- Supplier payment automation
:::
:::

---

## Conclusion

::: {.columns}
::: {.column width="50%"}

✅ **Telegram bot** integrated with XRP Ledger TestNet

✅ **Secure wallet management** with AES-256 encryption

✅ **Transaction processing** with multi-step confirmation

✅ **Production deployment** on Render platform

✅ **API documentation** available at /docs endpoint

### Technical Contributions

- Implemented custodial wallet model for ease of use
- Built webhook-based message handling for real-time response
- Created modular service architecture for scalability
- Integrated with external price APIs for market data
:::

::: {.column width="50%"}

:::
:::

::: notes
We've implemented a working system that demonstrates the technical feasibility of integrating XRP Ledger with Telegram for instant value transfer. The 3-5 second settlement time and minimal transaction costs provide measurable improvements over traditional payment methods.
:::

---

## Thank You

::: {.columns}
::: {.column width="60%"}
### Questions & Discussion

**Team Members:**
- Victor Dusabimana - DSBVIC001@myuct.ac.za
- Joseph Gray - GRYJOS004@myuct.ac.za
- Sam Horak - HRKSAM003@myuct.ac.za
- Cesaire Tobias - TBSCES001@myuct.ac.za

**Resources:**
- GitHub: [github.com/ces0491/xrp-telegram-bot](https://github.com/FSE-Class-Project/xrp-telegram-bot)
- API Docs: [xrp-bot-api.onrender.com/docs](https://xrp-bot-api.onrender.com/docs)
- Telegram: [@group3_xrpl_bot](https://t.me/group3_xrpl_bot)
:::

::: {.column width="40%"}
### Test Our Bot!

![XRP TestNet Bot QR](https://api.qrserver.com/v1/create-qr-code/?size=350x350&data=https://t.me/group3_xrpl_bot)

**[@group3_xrpl_bot](https://t.me/group3_xrpl_bot)**

*Scan QR or click link to start*
:::
:::

::: notes
Thank you
:::

---

# Appendix: Technical Details {.appendix}

The following slides contain supplementary technical details, implementation specifics, and extended documentation for those interested in deeper technical aspects.

---

## Database Schema

```{mermaid}
%%{init: {'theme': 'dark', 'themeVariables': {'fontSize': '14px'}}}%%
erDiagram
    USERS ||--o| WALLETS : has
    USERS ||--o{ TRANSACTIONS : sends
    WALLETS ||--o{ TRANSACTIONS : from
    USERS ||--o| USER_SETTINGS : configures

    USERS {
        int id PK
        string telegram_id UK
        string username
        string first_name
        string last_name
        datetime created_at
        boolean is_active
    }

    WALLETS {
        int id PK
        int user_id FK UK
        string xrp_address UK
        text encrypted_secret
        float balance
        datetime last_update
        int encryption_version
    }

    TRANSACTIONS {
        int id PK
        int sender_id FK
        string sender_address
        string recipient_address
        float amount
        float fee
        string tx_hash UK
        string status
        datetime created_at
        datetime confirmed_at
    }

    USER_SETTINGS {
        int id PK
        int user_id FK UK
        boolean price_alerts
        boolean tx_notifications
        string currency_display
        string language
    }
```

::: notes
Our normalized database schema ensures data integrity with foreign key constraints. The encryption_version field allows for key rotation without breaking existing wallets.
:::

---

## API Endpoints

| Endpoint | Method | Description | Avg Response |
|----------|--------|-------------|--------------|
| `/api/v1/user/register` | POST | Create user & wallet | s |
| `/api/v1/wallet/balance/{id}` | GET | Get XRP balance | s |
| `/api/v1/transaction/send` | POST | Send XRP | 2.5s |
| `/api/v1/transaction/history/{id}` | GET | Transaction list | s |
| `/api/v1/price/current` | GET | Current XRP price | s |
| `/api/v1/price/history` | GET | Historical prices | s |
| `/webhook/telegram` | POST | Telegram updates | s |
| `/health` | GET | Service status | s |

All endpoints include:
- Input validation with Pydantic
- Rate limiting per user
- Comprehensive error handling
- OpenAPI documentation

::: notes
Our RESTful API is fully documented with OpenAPI/Swagger
:::

---

## Deployment Architecture

```{mermaid}
%%{init: {'theme': 'dark', 'themeVariables': {'fontSize': '14px'}}}%%
graph TB
    subgraph "Render Cloud Platform"
        subgraph "Web Service"
            WEB[FastAPI Server<br/>srv-d2tceth5pdvs739e6g80]
            WH[Webhook Endpoint]
            API[REST API]
        end

        subgraph "Database"
            DB[(PostgreSQL<br/>dpg-d2tce07fte5s73a3ln40-a)]
            BACKUP[Daily Backups]
        end

        subgraph "Blueprint"
            BP[render.yaml]
            ENV[Environment Variables]
            HEALTH[Health Checks]
        end
    end

    subgraph "External Services"
        TG[Telegram Bot API]
        XRP[XRP Ledger TestNet]
        COIN[CoinGecko API]
    end

    BP --> WEB
    BP --> DB

    WEB --> WH
    WEB --> API
    WH <--> TG
    API <--> DB
    API <--> XRP
    API <--> COIN

    TG -.->|Webhooks| WH

    style WEB fill:#03a9f4
    style DB fill:#4fc3f7
    style BP fill:#0288d1
```

**Production (Render)**: Telegram sends updates via webhooks to our FastAPI server
**Local Development**: Uses polling for easier debugging

::: notes
We deploy on Render using Blueprint orchestration. The production system uses Telegram webhooks for real-time message processing, eliminating the need for a separate background worker. Local development uses polling for simplicity.
:::

---

## Transaction Flow Detail

```{mermaid}
%%{init: {'theme': 'dark', 'themeVariables': {'fontSize': '12px'}}}%%
flowchart LR
    subgraph "User Input"
        A[User sends command]
        B[/send 10 rN7n7...]
    end

    subgraph "Validation"
        C[Parse command]
        D[Validate amount]
        E[Validate address]
        F[Check balance]
    end

    subgraph "XRP Processing"
        G[Decrypt wallet]
        H[Create transaction]
        I[Sign transaction]
        J[Submit to ledger]
        K[Wait confirmation]
    end

    subgraph "Response"
        L[Update database]
        M[Send confirmation]
        N[Show tx hash]
    end

    A --> B --> C
    C --> D --> E --> F
    F -->|Valid| G
    F -->|Invalid| M
    G --> H --> I --> J --> K
    K -->|Success| L --> M --> N
    K -->|Failed| M

    style C fill:#03a9f4
    style J fill:#0288d1
    style M fill:#4fc3f7
```

Each step includes error handling and user feedback.

::: notes
Our transaction flow implements multiple validation layers before touching the blockchain. This prevents costly mistakes and ensures a smooth user experience.
:::

---

## References & Resources

### Technical Documentation
- [XRP Ledger Documentation](https://xrpl.org)
- [xrpl-py Library](https://xrpl-py.readthedocs.io)
- [Telegram Bot API](https://core.telegram.org/bots/api)
- [FastAPI Framework](https://fastapi.tiangolo.com)

### Project Resources
- **GitHub**: [github.com/FSE-Class-Project/xrp-telegram-bot](https://github.com/FSE-Class-Project/xrp-telegram-bot)
- **Live Bot**: [@group3_xrpl_bot](https://t.me/group3_xrpl_bot)
- **API Docs**: [xrp-bot-api.onrender.com/docs](https://xrp-bot-api.onrender.com/docs)

::: notes
All source code is available on GitHub under an open-source license. The bot is live and fully functional for testing on XRP's TestNet.
:::
