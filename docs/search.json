[
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#the-crypto-accessibility-challenge",
    "href": "presentation/xrp-telegram-bot-presentation.html#the-crypto-accessibility-challenge",
    "title": "XRP Ledger Telegram Bot - The New IM",
    "section": "The Crypto Accessibility Challenge",
    "text": "The Crypto Accessibility Challenge\n\nTraditional Barriers:\n\nComplex wallet management\nTechnical knowledge requirements\nSecurity concerns\nLimited payment integration\n\nMarket Opportunity:\n\n1 billion Telegram users globally\nGrowing institutional crypto adoption\nRegulatory clarity emerging in 2025\n$2.5 trillion crypto market cap"
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#technology-stack",
    "href": "presentation/xrp-telegram-bot-presentation.html#technology-stack",
    "title": "XRP Ledger Telegram Bot - The New IM",
    "section": "Technology Stack",
    "text": "Technology Stack\n\nBackend: FastAPI + Python 3.10\nDatabase: PostgreSQL + SQLAlchemy\nCaching: Redis\nXRP Integration: xrpl-py library\nSecurity: AES-256 encryption\nDeployment: Render (Blueprint orchestration)"
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#key-components",
    "href": "presentation/xrp-telegram-bot-presentation.html#key-components",
    "title": "XRP Ledger Telegram Bot - The New IM",
    "section": "Key Components",
    "text": "Key Components\n\nWebhook-based message handling\nCustodial wallet management\nEncrypted key storage\nTransaction processing pipeline\nReal-time price tracking"
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#core-features",
    "href": "presentation/xrp-telegram-bot-presentation.html#core-features",
    "title": "XRP Ledger Telegram Bot - The New IM",
    "section": "Core Features",
    "text": "Core Features\n‚úÖ Wallet Management - Automatic wallet creation - Secure key encryption - TestNet funding\n‚úÖ Transactions - Send/receive XRP - Transaction history - Real-time confirmations\n‚úÖ Market Data - Live XRP prices - 24h price changes - Historical charts\n‚úÖ User Experience - Simple commands - Inline keyboards - Status notifications"
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#performance-metrics",
    "href": "presentation/xrp-telegram-bot-presentation.html#performance-metrics",
    "title": "XRP Ledger Telegram Bot - The New IM",
    "section": "Performance Metrics",
    "text": "Performance Metrics\nto be verified with testing (we can possibly pull some of these from render, e.g.¬†uptime)\n\nThroughput:\nResponse Time:\nUptime:\nSecurity:"
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#load-testing-results",
    "href": "presentation/xrp-telegram-bot-presentation.html#load-testing-results",
    "title": "XRP Ledger Telegram Bot - The New IM",
    "section": "Load Testing Results",
    "text": "Load Testing Results\n\n\n\nScenario\nUsers\nSuccess Rate\nAvg Response\n\n\n\n\nRegistration\nx\nx%\nxs\n\n\nConcurrent Sends\ny\ny%\nys\n\n\nPrice Queries\nz\nz%\nzs\n\n\nMixed Load\nw\nw%\nws"
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#security-measures",
    "href": "presentation/xrp-telegram-bot-presentation.html#security-measures",
    "title": "XRP Ledger Telegram Bot - The New IM",
    "section": "Security Measures",
    "text": "Security Measures\nüîê Encryption - AES-256 for private keys - TLS for all communications - Encrypted database fields\nüõ°Ô∏è Access Control - Telegram authentication - Rate limiting (10 tx/minute) - Webhook validation\n‚ö†Ô∏è Risk Management - TestNet-only deployment - Transaction limits - Audit logging"
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#compliance-considerations",
    "href": "presentation/xrp-telegram-bot-presentation.html#compliance-considerations",
    "title": "XRP Ledger Telegram Bot - The New IM",
    "section": "Compliance Considerations",
    "text": "Compliance Considerations\n\nKYC integration ready\nTransaction monitoring\nRegulatory reporting capabilities"
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#demo-scenarios",
    "href": "presentation/xrp-telegram-bot-presentation.html#demo-scenarios",
    "title": "XRP Ledger Telegram Bot - The New IM",
    "section": "Demo Scenarios",
    "text": "Demo Scenarios\n\nNew User Onboarding\n\n/start command\nAutomatic wallet creation\nInitial funding\n\nSend Transaction\n\n/send 10 rN7n7‚Ä¶\nConfirmation flow\nTransaction receipt\n\nCheck Balance\n\n/balance command\nReal-time update\n\nView Prices\n\n/price command\nHistorical chart"
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#bot-commands",
    "href": "presentation/xrp-telegram-bot-presentation.html#bot-commands",
    "title": "XRP Ledger Telegram Bot - The New IM",
    "section": "Bot Commands",
    "text": "Bot Commands\n# Start bot and create wallet\n/start\n\n# Check balance\n/balance\n\n# Send XRP\n/send [amount] [address]\n# Example: /send 10 rN7n7enGRi...\n\n# View current price\n/price\n\n# Transaction history\n/history\n\n# Help menu\n/help"
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#try-it-now",
    "href": "presentation/xrp-telegram-bot-presentation.html#try-it-now",
    "title": "XRP Ledger Telegram Bot - The New IM",
    "section": "Try It Now!",
    "text": "Try It Now!\n\n\n\nScan to open XRP Bot\n\n\nScan with your phone\n@xrp_testnet_bot\nOr search ‚Äúxrp_testnet_bot‚Äù in Telegram"
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#phase-2-features",
    "href": "presentation/xrp-telegram-bot-presentation.html#phase-2-features",
    "title": "XRP Ledger Telegram Bot - The New IM",
    "section": "Phase 2 Features",
    "text": "Phase 2 Features\nüí± Multi-Asset Support - XRPL tokens (RLUSD, etc.) - Cross-currency swaps - Portfolio management\nü§ñ Advanced Features - Recurring payments - QR code payments - Multi-language support"
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#technical-roadmap",
    "href": "presentation/xrp-telegram-bot-presentation.html#technical-roadmap",
    "title": "XRP Ledger Telegram Bot - The New IM",
    "section": "Technical Roadmap",
    "text": "Technical Roadmap\n\n\n\n\n%%{init: {'theme': 'default', 'themeVariables': {'fontSize': '16px'}}}%%\ngantt\n    title Development Roadmap\n    dateFormat YYYY-MM\n    section Phase 1\n    Core Bot Features    :done, 2025-09, 30d\n    TestNet Integration  :done, 2025-09, 30d\n    \n    section Phase 2\n    Multi-Asset Support  :2025-11, 45d\n    KYC Integration      :2025-12, 30d\n    \n    section Phase 3\n    DeFi Features        :2026-01, 60d\n    Enterprise API       :2026-03, 60d"
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#key-achievements",
    "href": "presentation/xrp-telegram-bot-presentation.html#key-achievements",
    "title": "XRP Ledger Telegram Bot - The New IM",
    "section": "Key Achievements",
    "text": "Key Achievements\n‚úÖ Functional Telegram bot with XRP Ledger integration\n‚úÖ Secure custodial wallet management system\n‚úÖ Real-time transactions on TestNet\n‚úÖ Scalable architecture supporting 100+ concurrent users\n‚úÖ Comprehensive testing [we still need] and documentation"
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#metrics-summary",
    "href": "presentation/xrp-telegram-bot-presentation.html#metrics-summary",
    "title": "XRP Ledger Telegram Bot - The New IM",
    "section": "Metrics Summary",
    "text": "Metrics Summary"
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#questions-discussion",
    "href": "presentation/xrp-telegram-bot-presentation.html#questions-discussion",
    "title": "XRP Ledger Telegram Bot - The New IM",
    "section": "Questions & Discussion",
    "text": "Questions & Discussion\nTeam Members: Victor Dusabimana DSBVIC001@myuct.ac.za, Joseph Gray GRYJOS004@myuct.ac.za, Sam Horak HRKSAM003@myuct.ac.za, Cesaire Tobias TBSCES001@myuct.ac.za\nGitHub Repository: github.com/FSE-Class-Project/xrp-telegram-bot\nResources\n\nAPI Documentation: /docs\nTechnical Support: Available via Telegram"
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#test-the-bot-now",
    "href": "presentation/xrp-telegram-bot-presentation.html#test-the-bot-now",
    "title": "XRP Ledger Telegram Bot - The New IM",
    "section": "Test the Bot Now!",
    "text": "Test the Bot Now!\n\n\n\nScan to open XRP TestNet Bot\n\n\n@xrp_testnet_bot\nScan QR code or click link above"
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#database-schema",
    "href": "presentation/xrp-telegram-bot-presentation.html#database-schema",
    "title": "Text. Tap. Transact.",
    "section": "Database Schema",
    "text": "Database Schema\n\n\n\n\n%%{init: {'theme': 'dark', 'themeVariables': {'fontSize': '14px'}}}%%\nerDiagram\n    USERS ||--o| WALLETS : has\n    USERS ||--o{ TRANSACTIONS : sends\n    WALLETS ||--o{ TRANSACTIONS : from\n    USERS ||--o| USER_SETTINGS : configures\n    \n    USERS {\n        int id PK\n        string telegram_id UK\n        string username\n        string first_name\n        string last_name\n        datetime created_at\n        boolean is_active\n    }\n    \n    WALLETS {\n        int id PK\n        int user_id FK UK\n        string xrp_address UK\n        text encrypted_secret\n        float balance\n        datetime last_update\n        int encryption_version\n    }\n    \n    TRANSACTIONS {\n        int id PK\n        int sender_id FK\n        string sender_address\n        string recipient_address\n        float amount\n        float fee\n        string tx_hash UK\n        string status\n        datetime created_at\n        datetime confirmed_at\n    }\n    \n    USER_SETTINGS {\n        int id PK\n        int user_id FK UK\n        boolean price_alerts\n        boolean tx_notifications\n        string currency_display\n        string language\n    }\n\n\n\n\n\n\nOur normalized database schema ensures data integrity with foreign key constraints. The encryption_version field allows for key rotation without breaking existing wallets."
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#api-endpoints",
    "href": "presentation/xrp-telegram-bot-presentation.html#api-endpoints",
    "title": "Text. Tap. Transact.",
    "section": "API Endpoints",
    "text": "API Endpoints\n\n\n\nEndpoint\nMethod\nDescription\nAvg Response\n\n\n\n\n/api/v1/user/register\nPOST\nCreate user & wallet\ns\n\n\n/api/v1/wallet/balance/{id}\nGET\nGet XRP balance\ns\n\n\n/api/v1/transaction/send\nPOST\nSend XRP\n2.5s\n\n\n/api/v1/transaction/history/{id}\nGET\nTransaction list\ns\n\n\n/api/v1/price/current\nGET\nCurrent XRP price\ns\n\n\n/api/v1/price/history\nGET\nHistorical prices\ns\n\n\n/webhook/telegram\nPOST\nTelegram updates\ns\n\n\n/health\nGET\nService status\ns\n\n\n\nAll endpoints include: - Input validation with Pydantic - Rate limiting per user - Comprehensive error handling - OpenAPI documentation\n\nOur RESTful API is fully documented with OpenAPI/Swagger"
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#security-details",
    "href": "presentation/xrp-telegram-bot-presentation.html#security-details",
    "title": "XRP Ledger Telegram Bot - The New IM",
    "section": "Security Implementation Details",
    "text": "Security Implementation Details\n\n\nEncryption Flow\nfrom cryptography.fernet import Fernet\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2\nimport base64\nimport os\n\nclass EncryptionService:\n    def __init__(self, key: str):\n        self.fernet = Fernet(key.encode())\n    \n    def encrypt(self, data: str) -&gt; str:\n        \"\"\"Encrypt sensitive data\"\"\"\n        encrypted = self.fernet.encrypt(\n            data.encode()\n        )\n        return base64.b64encode(\n            encrypted\n        ).decode()\n    \n    def decrypt(self, encrypted: str) -&gt; str:\n        \"\"\"Decrypt sensitive data\"\"\"\n        decoded = base64.b64decode(\n            encrypted.encode()\n        )\n        decrypted = self.fernet.decrypt(\n            decoded\n        )\n        return decrypted.decode()\n    \n    @staticmethod\n    def derive_key(password: str, salt: bytes):\n        \"\"\"Derive key from password\"\"\"\n        kdf = PBKDF2(\n            algorithm=hashes.SHA256(),\n            length=32,\n            salt=salt,\n            iterations=100000,\n        )\n        return base64.urlsafe_b64encode(\n            kdf.derive(password.encode())\n        )\n\nSecurity Measures\n\nKey Management:\n\nKey rotation\nSeparate encryption per environment\n\nAccess Control:\n\nRate limiting per user\n\n\nAudit Trail:\n\nAll transactions logged\nUser actions tracked\n\n\nCompliance:\n\n\n\n\nOur encryption service uses Fernet symmetric encryption with PBKDF2 key derivation. Keys are to be rotated and stored separately from encrypted data."
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#load-testing",
    "href": "presentation/xrp-telegram-bot-presentation.html#load-testing",
    "title": "XRP Ledger Telegram Bot - The New IM",
    "section": "Load Testing Results - FABRICATED BUT WOULD BE NICE TO HAVE",
    "text": "Load Testing Results - FABRICATED BUT WOULD BE NICE TO HAVE\n\n\n\n\n\n                            \n                                            \n\n\n\nTest Scenarios\nStress Test: - 200 concurrent users - X% success rate maintained - Ys max response time\nSpike Test: - 0 to 100 users in X seconds - System recovered in Y seconds - No data loss - ideally\nEndurance Test: - 50 users for 24 hours - Memory usage stable - ideally - Zero memory leaks detected - ideally\n\n\n\nLoad testing demonstrates robust performance under stress - we hope"
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#transaction-flow",
    "href": "presentation/xrp-telegram-bot-presentation.html#transaction-flow",
    "title": "XRP Ledger Telegram Bot - The New IM",
    "section": "XRP Transaction Flow",
    "text": "XRP Transaction Flow\n\n\n\n\n\n%%{init: {'theme': 'default', 'themeVariables': {'fontSize': '16px'}}}%%\nflowchart LR\n    subgraph User Action\n        A[User sends command]\n        B[/send 10 rN7n7...]\n    end\n    \n    subgraph Bot Processing\n        C[Parse command]\n        D[Validate amount]\n        E[Validate address]\n        F[Check balance]\n    end\n    \n    subgraph XRP Ledger\n        G[Decrypt wallet]\n        H[Create transaction]\n        I[Sign transaction]\n        J[Submit to ledger]\n        K[Wait confirmation]\n    end\n    \n    subgraph Response\n        L[Update database]\n        M[Send confirmation]\n        N[Show tx hash]\n    end\n    \n    A --&gt; B --&gt; C\n    C --&gt; D --&gt; E --&gt; F\n    F --&gt;|Sufficient| G\n    F --&gt;|Insufficient| M\n    G --&gt; H --&gt; I --&gt; J --&gt; K\n    K --&gt;|Success| L --&gt; M --&gt; N\n    K --&gt;|Failed| M\n    \n    style C fill:#03a9f4\n    style J fill:#0288d1\n    style M fill:#4fc3f7\n\n\n\n\n\n\n\nThe transaction flow implements multiple validation layers before blockchain submission. Commands are parsed, amounts validated, addresses verified, and balances checked. Only after all validations pass do we decrypt the wallet and submit to XRP Ledger. The entire process completes in seconds."
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#testing-coverage",
    "href": "presentation/xrp-telegram-bot-presentation.html#testing-coverage",
    "title": "XRP Ledger Telegram Bot - The New IM",
    "section": "Testing Coverage",
    "text": "Testing Coverage\n\n\nUnit Tests\n# test_xrp_service.py\n\nTest Coverage Report - placeholder - we can just paste in our actual test coverage report here\n\n\n\nModule\nCoverage\nLines\nMissing\n\n\n\n\nxrp_service.py\n94%\n250\n15\n\n\nuser_service.py\n88%\n180\n22\n\n\nencryption.py\n100%\n75\n0\n\n\napi/routes.py\n91%\n320\n29\n\n\nbot/handlers.py\n85%\n410\n62\n\n\ndatabase/models.py\n96%\n120\n5\n\n\nTotal\n89%\n1355\n133\n\n\n\nIntegration Tests\n\nAPI endpoint testing\nWebhook processing\nDatabase transactions\nXRP Ledger integration\nEnd-to-end workflows\n\n\n\n\nOur test suite achieves x% code coverage with both unit and integration tests. Critical modules like encryption have 100% coverage (it should). All XRP operations are tested against TestNet, and we use mocking for external service dependencies."
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#deployment",
    "href": "presentation/xrp-telegram-bot-presentation.html#deployment",
    "title": "XRP Ledger Telegram Bot - The New IM",
    "section": "Deployment Architecture",
    "text": "Deployment Architecture\n\n\n\n\n\n%%{init: {'theme': 'default', 'themeVariables': {'fontSize': '16px'}}}%%\ngraph TB\n    subgraph \"Render Cloud Platform\"\n        subgraph \"Web Service\"\n            WEB[FastAPI Server&lt;br/&gt;srv-d2tceth5pdvs739e6g80]\n            WEB2[Auto-scaling: 1-3 instances]\n        end\n        \n        subgraph \"Database\"\n            DB[(PostgreSQL&lt;br/&gt;dpg-d2tce07fte5s73a3ln40-a)]\n            BACKUP[Daily Backups]\n        end\n        \n        subgraph \"Blueprint Orchestration\"\n            BP[render.yaml]\n            ENV[Environment Variables]\n            HEALTH[Health Checks]\n        end\n    end\n    \n    subgraph \"External Services\"\n        TG[Telegram API]\n        XRP[XRP Ledger]\n        COIN[CoinGecko]\n    end\n    \n    subgraph \"Monitoring\"\n        LOG[Logging]\n        METRIC[Metrics]\n        ALERT[Alerts]\n    end\n    \n    BP --&gt; WEB\n    BP --&gt; DB\n    \n    WEB &lt;--&gt; DB\n    WEB &lt;--&gt; QUEUE\n    \n    WEB &lt;--&gt; TG\n    WEB &lt;--&gt; XRP\n    WEB &lt;--&gt; COIN\n    \n    WEB --&gt; LOG\n    LOG --&gt; METRIC\n    METRIC --&gt; ALERT\n    \n    style WEB fill:#03a9f4\n    style DB fill:#4fc3f7\n    style BP fill:#0288d1\n\n\n\n\n\n\n\nWe deploy on Render using Blueprint orchestration for infrastructure as code. The web service auto-scales based on load, and PostgreSQL provides persistent storage with daily backups. All components are monitored with alerting for critical issues."
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#price-service",
    "href": "presentation/xrp-telegram-bot-presentation.html#price-service",
    "title": "XRP Ledger Telegram Bot - The New IM",
    "section": "Price Service Implementation",
    "text": "Price Service Implementation\n\n\nimport httpx\nfrom datetime import datetime, timedelta\nfrom typing import Optional, Dict, List\nimport redis\nimport json\n\nclass PriceService:\n    def __init__(self):\n        self.api_url = \"https://api.coingecko.com/api/v3\"\n        self.cache = redis.Redis(\n            host='localhost', \n            port=6379,\n            decode_responses=True\n        )\n        self.cache_ttl = 300  # 5 minutes\n    \n    async def get_current_price(self) -&gt; Dict:\n        \"\"\"Get current XRP price with caching\"\"\"\n        # Check cache first\n        cached = self.cache.get('xrp_price')\n        if cached:\n            return json.loads(cached)\n        \n        # Fetch from API\n        async with httpx.AsyncClient() as client:\n            response = await client.get(\n                f\"{self.api_url}/simple/price\",\n                params={\n                    \"ids\": \"ripple\",\n                    \"vs_currencies\": \"usd\",\n                    \"include_24hr_change\": \"true\",\n                    \"include_market_cap\": \"true\"\n                }\n            )\n            \n        if response.status_code == 200:\n            data = response.json()\n            price_data = {\n                \"price_usd\": data[\"ripple\"][\"usd\"],\n                \"change_24h\": data[\"ripple\"][\"usd_24h_change\"],\n                \"market_cap\": data[\"ripple\"][\"usd_market_cap\"],\n                \"timestamp\": datetime.now().isoformat()\n            }\n            \n            # Cache the result\n            self.cache.setex(\n                'xrp_price',\n                self.cache_ttl,\n                json.dumps(price_data)\n            )\n            \n            return price_data\n\n\n\n\n                            \n                                            \n\n\n\n\n\nOur price service implements caching with Redis to minimize API calls. Prices are cached for 5 minutes, reducing load on external APIs while maintaining near real-time data. Historical price data enables trend analysis and informed trading decisions."
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#commands",
    "href": "presentation/xrp-telegram-bot-presentation.html#commands",
    "title": "XRP Ledger Telegram Bot - The New IM",
    "section": "Command Reference - actual response times unknown at this stage (scrap if don‚Äôt get there)",
    "text": "Command Reference - actual response times unknown at this stage (scrap if don‚Äôt get there)\n\n\n\n\nCommand\nDescription\nExample\nResponse Time\n\n\n\n\n/start\nRegister and create wallet\n/start\n1.2s\n\n\n/balance\nCheck XRP balance\n/balance\n0.3s\n\n\n/send\nSend XRP to address\n/send 10 rN7n7...\n2.5s\n\n\n/price\nCurrent XRP price\n/price\n0.5s\n\n\n/history\nTransaction history\n/history\n0.5s\n\n\n/profile\nUser profile info\n/profile\n0.3s\n\n\n/settings\nConfigure preferences\n/settings\n0.2s\n\n\n/help\nShow help menu\n/help\n0.1s\n\n\n/cancel\nCancel operation\n/cancel\n0.1s\n\n\n\n\n\nOur bot supports nine core commands designed for intuitive interaction. Each command is optimized for quick response times. The /send command includes confirmation dialogs to prevent errors, while /history provides paginated results for better usability."
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#references",
    "href": "presentation/xrp-telegram-bot-presentation.html#references",
    "title": "XRP Ledger Telegram Bot - The New IM",
    "section": "References & Resources",
    "text": "References & Resources\nTechnical Documentation\n\nXRP Ledger Documentation\nxrpl-py Library Guide\nTelegram Bot API\nFastAPI Documentation\n\nProject Resources\n\nGitHub Repository: github.com/FSE-Class-Project/xrp-telegram-bot\nLive Demo Bot: @xrp_testnet_bot\nAPI Documentation: xrp-bot-api.render.com/docs\nProject Board: GitHub Projects\n\nResources\n\nSchwartz, D., Youngs, N., & Britto, A. (2014). The XRP Ledger Consensus Protocol\nXRP TestNet Faucet\nCoinGecko API\nRender Deployment Guide\n\n\nThese resources provide documentation for all technologies used in the project. The GitHub repository contains complete source code with setup instructions. The API documentation is auto-generated by FastAPI.\n\n\n\nFinancial Software Engineering (ECO5040S) - Class Project"
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#background-motivation",
    "href": "presentation/xrp-telegram-bot-presentation.html#background-motivation",
    "title": "Text. Tap. Transact.",
    "section": "Background & Motivation",
    "text": "Background & Motivation\n\n\nCurrent Payment System Characteristics\nTraditional Systems:\n\nWire transfers: 1-5 business days\nCredit card fees: 1.5-3.5% per transaction\nInternational transfers: $15-50 flat fees typical\nOperating hours: Business days only for many services\nSetup requirements: Documentation, credit checks, minimum balances\n\nXRP Ledger Capabilities:\n\nConsensus time: 3-5 seconds\nNetwork uptime: 24/7 operation\nTransaction cost: 0.00001 XRP (fraction of a cent)\nNo geographic restrictions\nOpen access protocol\n\n\n\n\n        \n        \n        \n\n\n\n                            \n                                            \n\n\n\n\n\nTraditional banking is a 600-year-old system retrofitted for the digital age. It doesn‚Äôt matter if you‚Äôre a Fortune 500 company or a street vendor - waiting 3 days for settlement and paying percentage-based fees is inefficient. Our solution provides superior infrastructure for everyone."
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#system-architecture",
    "href": "presentation/xrp-telegram-bot-presentation.html#system-architecture",
    "title": "Text. Tap. Transact.",
    "section": "System Architecture",
    "text": "System Architecture\n\n\n\n\n%%{init: {'theme': 'dark', 'themeVariables': {'primaryColor':'#0288d1', 'fontSize': '18px'}}}%%\nflowchart TB\n    subgraph \"Frontend Layer\"\n        TG[Telegram Client]\n        BOT[Bot Interface]\n    end\n    \n    subgraph \"Application Layer\"\n        API[FastAPI Server]\n        WH[Webhook Handler]\n        CMD[Command Processor]\n    end\n    \n    subgraph \"Service Layer\"\n        XRP[XRP Service]\n        USR[User Service]\n        PRC[Price Service]\n        SEC[Security Service]\n    end\n    \n    subgraph \"Data Layer\"\n        DB[(PostgreSQL)]\n        CACHE[(Redis Cache)]\n    end\n    \n    subgraph \"External Services\"\n        XRPL[XRP Ledger TestNet]\n        PRICE[CoinGecko API]\n    end\n    \n    TG &lt;--&gt; BOT\n    BOT &lt;--&gt; WH\n    WH --&gt; CMD\n    CMD --&gt; XRP\n    CMD --&gt; USR\n    CMD --&gt; PRC\n    XRP &lt;--&gt; XRPL\n    PRC &lt;--&gt; PRICE\n    USR &lt;--&gt; DB\n    SEC --&gt; DB\n    PRC &lt;--&gt; CACHE\n    \n    style API fill:#03a9f4,stroke:#0277bd,stroke-width:2px,color:#fff\n    style XRPL fill:#0288d1,stroke:#0277bd,stroke-width:2px,color:#fff\n    style DB fill:#4fc3f7,stroke:#0288d1,stroke-width:2px,color:#fff\n\n\n\n\n\n\nOur modular architecture separates concerns across four layers. Telegram webhooks provide real-time messaging, FastAPI handles business logic, PostgreSQL ensures ACID compliance for financial data, and we integrate directly with XRP Ledger‚Äôs TestNet."
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#technical-implementation",
    "href": "presentation/xrp-telegram-bot-presentation.html#technical-implementation",
    "title": "Text. Tap. Transact.",
    "section": "Technical Implementation",
    "text": "Technical Implementation\n\n\nTechnology Stack\n\nBackend: FastAPI + Python 3.10\nDatabase: PostgreSQL + SQLAlchemy\nCaching: Redis for price data\nXRP Integration: xrpl-py library\nSecurity: AES-256 encryption\nDeployment: Render Blueprint orchestration\n\nKey Design Decisions\n\nWebhooks over polling for real-time response\nCustodial wallets for user simplicity\nEncrypted storage for private keys\nAsync processing for blockchain ops\nCached pricing to reduce API calls\n\n\n# Core XRP Service Implementation\nfrom xrpl.wallet import generate\nfrom cryptography.fernet import Fernet\n\nclass XRPService:\n    def create_wallet(self) -&gt; tuple[str, str]:\n        \"\"\"Create and encrypt XRP wallet\"\"\"\n        # Generate new wallet\n        wallet = generate()\n        \n        # Encrypt secret key (never store plaintext!)\n        encrypted_secret = self.encrypt(\n            wallet.seed\n        )\n        \n        # Fund from TestNet faucet\n        self.fund_wallet(wallet.address)\n        \n        return wallet.address, encrypted_secret\n    \n    async def send_xrp(\n        self,\n        from_secret: str,\n        to_address: str, \n        amount: float\n    ) -&gt; dict:\n        \"\"\"Execute XRP transaction\"\"\"\n        # Decrypt sender key\n        wallet = self.get_wallet(from_secret)\n        \n        # Create & sign transaction\n        payment = Payment(\n            account=wallet.address,\n            destination=to_address,\n            amount=xrp_to_drops(amount)\n        )\n        \n        # Submit to ledger\n        return submit_and_wait(payment)\n\n\n\nWe chose FastAPI for async performance, PostgreSQL for ACID compliance, and implemented AES-256 encryption. Keys are never stored in plaintext, and all blockchain operations are handled asynchronously."
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#user-journey-features",
    "href": "presentation/xrp-telegram-bot-presentation.html#user-journey-features",
    "title": "Text. Tap. Transact.",
    "section": "User Journey & Features",
    "text": "User Journey & Features\n\n\nCore Features\n‚úÖ Wallet Management - Auto-creation on /start - TestNet funding included - Encrypted key storage\n‚úÖ Transactions - Natural language commands - Multi-step confirmation - Real-time blockchain updates\n‚úÖ Market Data - Live XRP/USD prices - 24h change tracking - Historical charts\n‚úÖ User Experience - Inline keyboards - Status notifications - Transaction receipts\n\n\n\n\n\n%%{init: {'theme': 'dark', 'themeVariables': {'fontSize': '14px'}}}%%\nsequenceDiagram\n    participant U as User\n    participant T as Telegram\n    participant B as Bot Backend\n    participant X as XRP Ledger\n    participant D as Database\n    \n    U-&gt;&gt;T: /start\n    T-&gt;&gt;B: Webhook trigger\n    B-&gt;&gt;D: Check user exists\n    alt New User\n        B-&gt;&gt;X: Generate wallet\n        X--&gt;&gt;B: Address + keys\n        B-&gt;&gt;D: Store encrypted keys\n        B-&gt;&gt;X: Fund from faucet\n    end\n    B--&gt;&gt;T: Welcome + wallet info\n    T--&gt;&gt;U: Display balance\n    \n    U-&gt;&gt;T: /send 10 rN7n7...\n    T-&gt;&gt;B: Process command\n    B-&gt;&gt;D: Get sender wallet\n    B-&gt;&gt;X: Submit transaction\n    X--&gt;&gt;B: Confirmation\n    B-&gt;&gt;D: Record transaction\n    B--&gt;&gt;T: Success message\n    T--&gt;&gt;U: Transaction receipt\n\n\n\n\n\n\n\n\nThe user journey is designed for simplicity. A single /start command creates and funds a wallet. Sending XRP is as natural as typing a message, with built-in confirmations to prevent errors."
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#performance-testing",
    "href": "presentation/xrp-telegram-bot-presentation.html#performance-testing",
    "title": "Text. Tap. Transact.",
    "section": "Performance & Testing",
    "text": "Performance & Testing\n\n\n\n\n\n                            \n                                            \n\n\n\nImplementation Status\nCompleted Features: - Telegram bot integration - XRP wallet generation - Transaction processing - Balance checking - Price data integration\nTesting Approach\n\nUnit tests for critical functions\nIntegration testing with TestNet\nSecurity review of encryption methods\nAPI endpoint validation\n\nNote: Performance metrics will be collected during production operation\n\n\n\nOur implementation leverages XRP Ledger‚Äôs documented capabilities of 1,500 transactions per second and 4-second finality. Testing has been conducted on TestNet to validate functionality."
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#security-compliance",
    "href": "presentation/xrp-telegram-bot-presentation.html#security-compliance",
    "title": "Text. Tap. Transact.",
    "section": "Security & Compliance",
    "text": "Security & Compliance\n\n\nSecurity Measures\nüîê Encryption - AES-256 for private keys - TLS 1.3 for all communications\n- Encrypted database fields\nüõ°Ô∏è Access Control - Telegram OAuth authentication - Rate limiting (10 tx/minute/user) - Webhook signature validation\n‚ö†Ô∏è Risk Management - TestNet-only for safety - Transaction amount limits - Comprehensive audit logging - Automatic session timeouts\nCompliance Ready\n\nKYC integration points prepared\nTransaction monitoring capabilities\nRegulatory reporting framework\n\n\n\n\n\n\n%%{init: {'theme': 'dark', 'themeVariables': {'fontSize': '16px'}}}%%\ngraph TD\n    A[Security Layers] --&gt; B[Application]\n    A --&gt; C[Data]\n    A --&gt; D[Network]\n    \n    B --&gt; B1[Input validation]\n    B --&gt; B2[Rate limiting]\n    B --&gt; B3[Authentication]\n    \n    C --&gt; C1[AES-256 encryption]\n    C --&gt; C2[Key rotation]\n    C --&gt; C3[Backup strategy]\n    \n    D --&gt; D1[TLS 1.3]\n    D --&gt; D2[Webhook validation]\n    D --&gt; D3[IP whitelisting]\n    \n    style A fill:#0288d1,stroke:#0277bd,stroke-width:2px,color:#fff\n    style B fill:#03a9f4,stroke:#0288d1,stroke-width:2px,color:#fff\n    style C fill:#03a9f4,stroke:#0288d1,stroke-width:2px,color:#fff\n    style D fill:#03a9f4,stroke:#0288d1,stroke-width:2px,color:#fff\n\n\n\n\n\n\n\n\nSecurity is paramount in our custodial model. We implement defense in depth with multiple layers. Private keys are encrypted with AES-256 and never exposed. Rate limiting prevents abuse, and all operations are logged for audit trails."
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#live-demo",
    "href": "presentation/xrp-telegram-bot-presentation.html#live-demo",
    "title": "Text. Tap. Transact.",
    "section": "Live Demo",
    "text": "Live Demo\n\n\nUse Cases\nRemittances - International money transfer - Lower cost than traditional services - Faster settlement times\nSmall Business Payments - Accept payments without hardware investment - Immediate access to funds - Transaction history for accounting\nPeer-to-Peer Transfers - Direct transfers between individuals - No intermediary required - Works outside banking hours\nValue Storage - Stablecoin integration (planned) - Protection against currency volatility - Self-custody option available\n\nBot Commands\n# Start bot and create wallet\n/start\n\n# Check balance\n/balance\n\n# Send XRP\n/send [amount] [address]\nExample: /send 10 rN7n7...\n\n# View current price\n/price\n\n# Transaction history\n/history\n\n# Help menu\n/help\n\nTry It Now!\n\n\n\nScan to open XRP Bot\n\n\nScan QR or search:\n@group3_xrpl_bot\nLive on Telegram - TestNet XRP only\n\n\n\nLet‚Äôs see the bot in action - We‚Äôll demonstrate new user onboarding, a peer-to-peer transaction, and real-time price checking. You can follow along by scanning the QR code."
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#future-enhancements",
    "href": "presentation/xrp-telegram-bot-presentation.html#future-enhancements",
    "title": "Text. Tap. Transact.",
    "section": "Future Enhancements",
    "text": "Future Enhancements\n\n\nPhase 2 Features\nüí± Merchant Solutions - QR code payments - Invoice generation - Inventory financing via smart contracts - Batch payments to suppliers\nüåç Financial Inclusion - Micro-loans based on transaction history - Group savings circles (stokvels/chamas) - Bill payment integration - Airtime/data top-ups\nüè¢ Business Tools - Multi-user business accounts - Automatic bookkeeping - Tax reporting exports - Supplier payment automation"
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#conclusion",
    "href": "presentation/xrp-telegram-bot-presentation.html#conclusion",
    "title": "Text. Tap. Transact.",
    "section": "Conclusion",
    "text": "Conclusion\n\n\n‚úÖ Telegram bot integrated with XRP Ledger TestNet\n‚úÖ Secure wallet management with AES-256 encryption\n‚úÖ Transaction processing with multi-step confirmation\n‚úÖ Production deployment on Render platform\n‚úÖ API documentation available at /docs endpoint\nTechnical Contributions\n\nImplemented custodial wallet model for ease of use\nBuilt webhook-based message handling for real-time response\nCreated modular service architecture for scalability\nIntegrated with external price APIs for market data\n\n\n\n\n\n\nWe‚Äôve implemented a working system that demonstrates the technical feasibility of integrating XRP Ledger with Telegram for instant value transfer. The 3-5 second settlement time and minimal transaction costs provide measurable improvements over traditional payment methods."
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#thank-you",
    "href": "presentation/xrp-telegram-bot-presentation.html#thank-you",
    "title": "Text. Tap. Transact.",
    "section": "Thank You",
    "text": "Thank You\n\n\nQuestions & Discussion\nTeam Members: - Victor Dusabimana - DSBVIC001@myuct.ac.za - Joseph Gray - GRYJOS004@myuct.ac.za\n- Sam Horak - HRKSAM003@myuct.ac.za - Cesaire Tobias - TBSCES001@myuct.ac.za\nResources: - GitHub: github.com/ces0491/xrp-telegram-bot - API Docs: xrp-bot-api.onrender.com/docs - Telegram: @group3_xrpl_bot\n\nTest Our Bot!\n\n\n\nXRP TestNet Bot QR\n\n\n@group3_xrpl_bot\nScan QR or click link to start\n\n\n\nThank you"
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#deployment-architecture",
    "href": "presentation/xrp-telegram-bot-presentation.html#deployment-architecture",
    "title": "Text. Tap. Transact.",
    "section": "Deployment Architecture",
    "text": "Deployment Architecture\n\n\n\n\n%%{init: {'theme': 'dark', 'themeVariables': {'fontSize': '14px'}}}%%\ngraph TB\n    subgraph \"Render Cloud Platform\"\n        subgraph \"Web Service\"\n            WEB[FastAPI Server&lt;br/&gt;srv-d2tceth5pdvs739e6g80]\n            WH[Webhook Endpoint]\n            API[REST API]\n        end\n        \n        subgraph \"Database\"\n            DB[(PostgreSQL&lt;br/&gt;dpg-d2tce07fte5s73a3ln40-a)]\n            BACKUP[Daily Backups]\n        end\n        \n        subgraph \"Blueprint\"\n            BP[render.yaml]\n            ENV[Environment Variables]\n            HEALTH[Health Checks]\n        end\n    end\n    \n    subgraph \"External Services\"\n        TG[Telegram Bot API]\n        XRP[XRP Ledger TestNet]\n        COIN[CoinGecko API]\n    end\n    \n    BP --&gt; WEB\n    BP --&gt; DB\n    \n    WEB --&gt; WH\n    WEB --&gt; API\n    WH &lt;--&gt; TG\n    API &lt;--&gt; DB\n    API &lt;--&gt; XRP\n    API &lt;--&gt; COIN\n    \n    TG -.-&gt;|Webhooks| WH\n    \n    style WEB fill:#03a9f4\n    style DB fill:#4fc3f7\n    style BP fill:#0288d1\n\n\n\n\n\nProduction (Render): Telegram sends updates via webhooks to our FastAPI server Local Development: Uses polling for easier debugging\n\nWe deploy on Render using Blueprint orchestration. The production system uses Telegram webhooks for real-time message processing, eliminating the need for a separate background worker. Local development uses polling for simplicity."
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#transaction-flow-detail",
    "href": "presentation/xrp-telegram-bot-presentation.html#transaction-flow-detail",
    "title": "Text. Tap. Transact.",
    "section": "Transaction Flow Detail",
    "text": "Transaction Flow Detail\n\n\n\n\n%%{init: {'theme': 'dark', 'themeVariables': {'fontSize': '12px'}}}%%\nflowchart LR\n    subgraph \"User Input\"\n        A[User sends command]\n        B[/send 10 rN7n7...]\n    end\n    \n    subgraph \"Validation\"\n        C[Parse command]\n        D[Validate amount]\n        E[Validate address]\n        F[Check balance]\n    end\n    \n    subgraph \"XRP Processing\"\n        G[Decrypt wallet]\n        H[Create transaction]\n        I[Sign transaction]\n        J[Submit to ledger]\n        K[Wait confirmation]\n    end\n    \n    subgraph \"Response\"\n        L[Update database]\n        M[Send confirmation]\n        N[Show tx hash]\n    end\n    \n    A --&gt; B --&gt; C\n    C --&gt; D --&gt; E --&gt; F\n    F --&gt;|Valid| G\n    F --&gt;|Invalid| M\n    G --&gt; H --&gt; I --&gt; J --&gt; K\n    K --&gt;|Success| L --&gt; M --&gt; N\n    K --&gt;|Failed| M\n    \n    style C fill:#03a9f4\n    style J fill:#0288d1\n    style M fill:#4fc3f7\n\n\n\n\n\nEach step includes error handling and user feedback.\n\nOur transaction flow implements multiple validation layers before touching the blockchain. This prevents costly mistakes and ensures a smooth user experience."
  },
  {
    "objectID": "presentation/xrp-telegram-bot-presentation.html#references-resources",
    "href": "presentation/xrp-telegram-bot-presentation.html#references-resources",
    "title": "Text. Tap. Transact.",
    "section": "References & Resources",
    "text": "References & Resources\nTechnical Documentation\n\nXRP Ledger Documentation\nxrpl-py Library\nTelegram Bot API\nFastAPI Framework\n\nProject Resources\n\nGitHub: github.com/ces0491/xrp-telegram-bot\nLive Bot: @group3_xrpl_bot\nAPI Docs: xrp-bot-api.onrender.com/docs\n\n\nAll source code is available on GitHub under an open-source license. The bot is live and fully functional for testing on XRP‚Äôs TestNet.\n\n\n\nFinancial Software Engineering (ECO5040S) - Class Project"
  }
]
