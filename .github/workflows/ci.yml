name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev/ces, dev/joe, dev/sam, dev/Victor2DUSA ]
  pull_request:
    branches: [ main ]

# Add permissions for GITHUB_TOKEN
permissions:
  contents: read
  security-events: write  # Required for uploading SARIF files
  actions: read
  pull-requests: write    # Optional: for PR comments

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio black flake8

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true  # Don't fail the whole job on linting warnings

    - name: Format check with black
      id: black-check
      run: |
        # Check if code is formatted with your config (line-length=100 from pyproject.toml)
        black --check backend/ bot/ tests/ || echo "formatting_needed=true" >> $GITHUB_OUTPUT
      continue-on-error: true

    - name: Show formatting diff
      if: steps.black-check.outputs.formatting_needed == 'true'
      run: |
        echo "The following files need formatting (line-length=100):"
        black --diff backend/ bot/ tests/
        echo ""
        echo "To fix locally, run: black backend/ bot/ tests/"

    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        TELEGRAM_BOT_TOKEN: test_token
        ENCRYPTION_KEY: "test_encryption_key_32_bytes_long_exactly!!!"
        JWT_SECRET: test_jwt_secret
        ENVIRONMENT: test
      run: |
        # Create test directories if they don't exist
        mkdir -p tests
        # Run tests if they exist, otherwise create a basic test
        if [ "$(ls -A tests/*.py 2>/dev/null)" ]; then
          pytest tests/ -v --cov=backend --cov=bot --cov-report=xml --cov-report=html
        else
          echo "No tests found, skipping test execution"
        fi
      continue-on-error: true  # Allow workflow to continue even if tests fail

    - name: Upload coverage reports
      if: always()
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
    - uses: actions/checkout@v3

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'  # Only report critical and high vulnerabilities
        exit-code: '0'  # Don't fail the build on vulnerabilities

    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy'
      continue-on-error: true  # Don't fail if upload fails (e.g., on forks)

  # Optional: Auto-format job that runs on PRs
  auto-format:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: write
      pull-requests: write

    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: ${{ github.head_ref }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Black
      run: pip install black

    - name: Auto-format code
      run: |
        black backend/ bot/ tests/

    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

    - name: Commit changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "Auto-format code with Black"
        git push

  deploy:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      success()

    steps:
    - name: Deploy to Render
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      run: |
        if [ -z "$RENDER_API_KEY" ] || [ -z "$RENDER_SERVICE_ID" ]; then
          echo "Render deployment secrets not configured, skipping deployment"
          exit 0
        fi

        curl -X POST \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys"

    # - name: Notify deployment
    #   if: always()
    #   uses: 8398a7/action-slack@v3
    #   with:
    #     status: ${{ job.status }}
    #     text: 'XRP Bot deployment ${{ job.status }}'
    #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}
    #     channel: '#deployments'
    #   continue-on-error: true  # Don't fail if Slack webhook is not configured
