[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Too strict for gradual adoption
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
exclude = ["alembic/"]
# plugins = ["sqlalchemy.ext.mypy.plugin"]  # Disabled due to dependency issues

[[tool.mypy.overrides]]
module = [
    "xrpl.*",
    "httpx.*",
    "telegram.*",
    "sqlalchemy.*",
    "fastapi.*",
    "pydantic.*",
    "pydantic_settings.*",
    "pytest.*",
    "uvicorn.*",
    "slowapi.*",
    "starlette.*",
    "alembic.*",
    "dotenv.*",
    "sentry_sdk.*",
    "traitlets.*",
    "pandas.*",
    "faker.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
# Ignore complex telegram callback assignment issues
module = ["bot.handlers.*"]
disable_error_code = ["assignment"]

[[tool.mypy.overrides]]
# Ignore SQLAlchemy query return types and other issues
module = [
    "backend.utils.idempotency",
    "backend.services.user_service",
    "backend.services.xrp_service",
    "backend.api.routes",
    "backend.api.settings_routes",
    "backend.api.middleware",
    "bot.handlers.transaction",
    "bot.handlers.settings",
    "bot.handlers.start",
    "backend.database.*",
    "alembic.*",
    "alembic.env",
    "migrate",
]
disable_error_code = ["no-any-return", "assignment", "attr-defined", "type-arg", "misc", "call-arg", "index", "union-attr"]

[tool.ruff]
target-version = "py310"
line-length = 100  # Increased from 88 for better readability

# Exclude auto-generated and non-source files
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    ".pytest_cache",
    "build",
    "dist",
    "*.egg-info",
    "alembic/versions/",  # Ignore all Alembic migration files
    "docs/",              # Ignore documentation
    ".env",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "S",  # flake8-bandit (security)
    "N",  # pep8-naming
    "D",  # pydocstyle
]
ignore = [
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D107",  # Missing docstring in __init__
    "D203",  # 1 blank line required before class docstring (conflicts with D211)
    "D213",  # Multi-line docstring summary should start at the second line (conflicts with D212)
    "S101",  # Use of assert detected
    "S311",  # Standard pseudo-random generators are not suitable for security/cryptographic purposes
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"bot/main.py" = ["E402"]  # Module level imports not at top (needed for path setup)
"alembic/env.py" = ["E402"]  # Alembic env.py needs specific import order
"migrate.py" = ["E402"]  # Migration scripts may need path setup first
"debug_setup.py" = ["F401", "B007", "S603"]  # Debug/setup scripts have different requirements
"tests/" = ["S101", "ARG", "D"]  # Allow assert and unused args in tests, no docstrings required
"backup_lint.py" = ["S603", "F841", "E501", "D401"]  # Lint utility script
"quick_lint.py" = ["S603"]  # Lint utility script
"run.py" = ["S603", "S110"]  # Main runner script needs subprocess calls

[tool.ruff.lint.isort]
known-third-party = ["xrpl", "telegram", "fastapi", "sqlalchemy"]

[tool.ruff.format]
# Use ruff's formatter instead of black
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = "--verbose --tb=short"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "xrp-telegram-bot"
version = "1.0.0"
description = "XRP Ledger Telegram Bot for cryptocurrency transactions"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "FSE Group 3", email = "support@fse-group3.co.za"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "python-telegram-bot>=20.7",
    "fastapi>=0.109.0",
    "uvicorn[standard]>=0.27.0",
    "sqlalchemy>=2.0.25",
    "alembic>=1.13.1",
    "xrpl-py>=4.3.0",
    "cryptography>=41.0.7",
    "python-dotenv>=1.0.0",
    "pydantic>=2.5.3",
    "pydantic-settings>=2.1.0",
    "psycopg2-binary>=2.9.9",
    "httpx==0.25.2",
    "requests>=2.31.0",
    "slowapi>=0.1.9",
    "redis>=5.0.1",
    "sentry-sdk[fastapi]>=1.40.0",
    "python-json-logger>=2.0.7",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.4",
    "pytest-asyncio>=0.23.3",
    "pytest-cov>=4.1.0",
    "faker>=19.13.0",
    "pandas>=2.2.0",
    "mypy>=1.8.0",
    "ruff>=0.1.9",
    "types-requests",
    "types-redis",
    "types-sqlalchemy>=1.4.53.38",
]

[project.urls]
"Homepage" = "https://github.com/ces0491/xrp-telegram-bot"
"Bug Tracker" = "https://github.com/ces0491/xrp-telegram-bot/issues"
"Source" = "https://github.com/ces0491/xrp-telegram-bot"
