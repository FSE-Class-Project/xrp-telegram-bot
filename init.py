#!/usr/bin/env python3
"""Initialize the XRP Telegram Bot project."""
from __future__ import annotations
import os
import sys
from pathlib import Path
from cryptography.fernet import Fernet


def create_env_file():
    """Create .env file with required variables."""
    env_path = Path(".env")
    
    if env_path.exists():
        print("‚ö†Ô∏è  .env file already exists")
        response = input("Do you want to overwrite it? (y/N): ")
        if response.lower() != 'y':
            return
    
    # Generate encryption key
    encryption_key = Fernet.generate_key().decode()
    
    # Get Telegram bot token
    print("\nüì± Setting up Telegram Bot")
    print("1. Open Telegram and search for @BotFather")
    print("2. Send /newbot and follow the instructions")
    print("3. Copy the token you receive")
    bot_token = input("\nEnter your Telegram Bot Token: ").strip()
    
    if not bot_token:
        bot_token = "YOUR_BOT_TOKEN_HERE"
        print("‚ö†Ô∏è  No token provided - you'll need to add it later")
    
    # Database choice
    print("\nüíæ Database Configuration")
    print("1. SQLite (local development)")
    print("2. PostgreSQL (production)")
    db_choice = input("Choose database (1/2) [1]: ").strip() or "1"
    
    if db_choice == "2":
        db_host = input("PostgreSQL host [localhost]: ").strip() or "localhost"
        db_port = input("PostgreSQL port [5432]: ").strip() or "5432"
        db_name = input("Database name [xrp_bot]: ").strip() or "xrp_bot"
        db_user = input("Database user [xrp_user]: ").strip() or "xrp_user"
        db_password = input("Database password: ").strip()
        
        database_url = f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
    else:
        database_url = "sqlite:///./xrp_bot.db"
    
    # Environment
    print("\nüåç Environment")
    env_choice = input("Environment (development/production) [development]: ").strip() or "development"
    
    # API configuration
    api_port = input("\nAPI port [8000]: ").strip() or "8000"
    
    # Write .env file
    env_content = f"""# XRP Telegram Bot Configuration
# Generated by init_project.py

# Environment
ENVIRONMENT={env_choice}
DEBUG={'true' if env_choice == 'development' else 'false'}

# Telegram Configuration
TELEGRAM_BOT_TOKEN={bot_token}

# Database Configuration
DATABASE_URL={database_url}

# Security
ENCRYPTION_KEY={encryption_key}
JWT_SECRET={Fernet.generate_key().decode()}

# XRP Ledger (TestNet)
XRP_NETWORK=testnet
XRP_WEBSOCKET_URL=wss://s.altnet.rippletest.net:51233
XRP_JSON_RPC_URL=https://s.altnet.rippletest.net:51234
XRP_FAUCET_URL=https://faucet.altnet.rippletest.net/accounts

# API Configuration
API_HOST=0.0.0.0
API_PORT={api_port}
API_URL=http://localhost:{api_port}

# External APIs
PRICE_API_URL=https://api.coingecko.com/api/v3

# Redis (optional)
# REDIS_URL=redis://localhost:6379
"""
    
    env_path.write_text(env_content)
    print(f"\n‚úÖ Created .env file")
    print(f"   Encryption key: {encryption_key[:20]}...")
    
    # Create .env.example
    example_content = """# XRP Telegram Bot Configuration

# Environment
ENVIRONMENT=development
DEBUG=true

# Telegram Configuration
TELEGRAM_BOT_TOKEN=your_bot_token_here

# Database Configuration
DATABASE_URL=sqlite:///./xrp_bot.db
# For PostgreSQL: postgresql://user:password@localhost/xrp_bot

# Security
ENCRYPTION_KEY=generate_with_init_project.py
JWT_SECRET=generate_with_init_project.py

# XRP Ledger (TestNet)
XRP_NETWORK=testnet
XRP_WEBSOCKET_URL=wss://s.altnet.rippletest.net:51233
XRP_JSON_RPC_URL=https://s.altnet.rippletest.net:51234
XRP_FAUCET_URL=https://faucet.altnet.rippletest.net/accounts

# API Configuration
API_HOST=0.0.0.0
API_PORT=8000
API_URL=http://localhost:8000

# External APIs
PRICE_API_URL=https://api.coingecko.com/api/v3

# Redis (optional)
# REDIS_URL=redis://localhost:6379
"""
    
    Path(".env.example").write_text(example_content)
    print("‚úÖ Created .env.example file")


def create_directories():
    """Create required project directories."""
    directories = [
        "backend/database",
        "backend/api",
        "backend/services",
        "backend/utils",
        "bot/handlers",
        "bot/keyboards",
        "bot/messages",
        "tests",
        "logs"
    ]
    
    for dir_path in directories:
        Path(dir_path).mkdir(parents=True, exist_ok=True)
        # Create __init__.py files
        init_file = Path(dir_path) / "__init__.py"
        if not init_file.exists():
            init_file.write_text('"""Package initialization."""\n')
    
    print("‚úÖ Created project directories")


def init_database():
    """Initialize the database."""
    try:
        # Add backend to path
        sys.path.insert(0, str(Path.cwd()))
        
        from backend.database.connection import init_database
        init_database()
        print("‚úÖ Database tables created")
    except ImportError as e:
        print(f"‚ö†Ô∏è  Could not initialize database: {e}")
        print("   Run this after installing dependencies")
    except Exception as e:
        print(f"‚ùå Database initialization failed: {e}")


def create_test_files():
    """Create basic test files."""
    test_backend = '''"""Backend API tests."""
import pytest
from fastapi.testclient import TestClient


def test_health_check():
    """Test health endpoint."""
    # TODO: Implement after backend is set up
    assert True
'''
    
    test_bot = '''"""Bot tests."""
import pytest


def test_bot_initialization():
    """Test bot initialization."""
    # TODO: Implement after bot is set up
    assert True
'''
    
    Path("tests/test_backend.py").write_text(test_backend)
    Path("tests/test_bot.py").write_text(test_bot)
    print("‚úÖ Created test files")


def main():
    """Main initialization function."""
    print("üöÄ XRP Telegram Bot Project Initialization")
    print("=" * 50)
    
    # Check Python version
    if sys.version_info < (3, 10):
        print(f"‚ùå Python 3.10+ required (you have {sys.version})")
        sys.exit(1)
    
    print(f"‚úÖ Python {sys.version.split()[0]} detected")
    
    # Create directories
    create_directories()
    
    # Create .env file
    create_env_file()
    
    # Create test files
    create_test_files()
    
    # Try to initialize database
    print("\nüíæ Database Initialization")
    response = input("Initialize database now? (y/N): ")
    if response.lower() == 'y':
        init_database()
    
    print("\n" + "=" * 50)
    print("‚úÖ Project initialization complete!")
    print("\nNext steps:")
    print("1. Install dependencies: pip install -r requirements.txt")
    print("2. Review and update .env file if needed")
    print("3. Initialize database: python -c 'from backend.database.connection import init_database; init_database()'")
    print("4. Start backend: python -m backend.main")
    print("5. Start bot: python -m bot.main")
    print("\nFor production deployment to Render:")
    print("1. Push to GitHub (dev/ces branch)")
    print("2. Update environment variables in Render dashboard")
    print("3. Deploy via Render blueprint")


if __name__ == "__main__":
    main()